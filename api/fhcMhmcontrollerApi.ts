/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { XHR } from "./XHR"
import * as models from "../model/models"

export class fhcMhmcontrollerApi {
  host: string
  headers: Array<XHR.Header>
  constructor(host: string, headers: any) {
    this.host = host
    this.headers = Object.keys(headers).map(k => new XHR.Header(k, headers[k]))
  }

  setHeaders(h: Array<XHR.Header>) {
    this.headers = h
  }

  handleError(e: XHR.Data) {
    if (e.status == 401) throw Error("auth-failed")
    else throw Error("api-error" + e.status)
  }

  cancelSubscriptionUsingPOST(
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    hcpNihii: string,
    hcpName: string,
    patientFirstName: string,
    patientLastName: string,
    patientGender: string,
    reference: string,
    patientSsin?: string,
    io?: string,
    ioMembership?: string
  ): Promise<models.CancelSubscriptionResultWithResponse | any> {
    let _body = null

    const _url =
      this.host +
      "/mhm/cancelSubscription" +
      "?ts=" +
      new Date().getTime() +
      (hcpNihii ? "&hcpNihii=" + hcpNihii : "") +
      (hcpName ? "&hcpName=" + hcpName : "") +
      (patientSsin ? "&patientSsin=" + patientSsin : "") +
      (patientFirstName ? "&patientFirstName=" + patientFirstName : "") +
      (patientLastName ? "&patientLastName=" + patientLastName : "") +
      (patientGender ? "&patientGender=" + patientGender : "") +
      (io ? "&io=" + io : "") +
      (ioMembership ? "&ioMembership=" + ioMembership : "") +
      (reference ? "&reference=" + reference : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId))
    headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId))
    headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase))
    return XHR.sendCommand("POST", _url, headers, _body)
      .then(doc => new models.CancelSubscriptionResultWithResponse(doc.body as JSON))
      .catch(err => this.handleError(err))
  }
  notifySubscriptionClosureUsingPOST(
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    hcpNihii: string,
    hcpName: string,
    patientFirstName: string,
    patientLastName: string,
    patientGender: string,
    reference: string,
    endDate: number,
    reason: string,
    decisionType: string,
    patientSsin?: string,
    io?: string,
    ioMembership?: string
  ): Promise<models.EndSubscriptionResultWithResponse | any> {
    let _body = null

    const _url =
      this.host +
      "/mhm/notifySubscriptionClosure" +
      "?ts=" +
      new Date().getTime() +
      (hcpNihii ? "&hcpNihii=" + hcpNihii : "") +
      (hcpName ? "&hcpName=" + hcpName : "") +
      (patientSsin ? "&patientSsin=" + patientSsin : "") +
      (patientFirstName ? "&patientFirstName=" + patientFirstName : "") +
      (patientLastName ? "&patientLastName=" + patientLastName : "") +
      (patientGender ? "&patientGender=" + patientGender : "") +
      (io ? "&io=" + io : "") +
      (ioMembership ? "&ioMembership=" + ioMembership : "") +
      (reference ? "&reference=" + reference : "") +
      (endDate ? "&endDate=" + endDate : "") +
      (reason ? "&reason=" + reason : "") +
      (decisionType ? "&decisionType=" + decisionType : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId))
    headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId))
    headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase))
    return XHR.sendCommand("POST", _url, headers, _body)
      .then(doc => new models.EndSubscriptionResultWithResponse(doc.body as JSON))
      .catch(err => this.handleError(err))
  }
  sendSubscriptionUsingPOST(
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    hcpNihii: string,
    hcpName: string,
    patientFirstName: string,
    patientLastName: string,
    patientGender: string,
    startDate: number,
    isTrial: boolean,
    signatureType: string,
    isRecovery: boolean,
    isTestForNotify: boolean,
    patientSsin?: string,
    io?: string,
    ioMembership?: string
  ): Promise<models.StartSubscriptionResultWithResponse | any> {
    let _body = null

    const _url =
      this.host +
      "/mhm/sendSubscription" +
      "?ts=" +
      new Date().getTime() +
      (hcpNihii ? "&hcpNihii=" + hcpNihii : "") +
      (hcpName ? "&hcpName=" + hcpName : "") +
      (patientSsin ? "&patientSsin=" + patientSsin : "") +
      (patientFirstName ? "&patientFirstName=" + patientFirstName : "") +
      (patientLastName ? "&patientLastName=" + patientLastName : "") +
      (patientGender ? "&patientGender=" + patientGender : "") +
      (io ? "&io=" + io : "") +
      (ioMembership ? "&ioMembership=" + ioMembership : "") +
      (startDate ? "&startDate=" + startDate : "") +
      (isTrial ? "&isTrial=" + isTrial : "") +
      (signatureType ? "&signatureType=" + signatureType : "") +
      (isRecovery ? "&isRecovery=" + isRecovery : "") +
      (isTestForNotify ? "&isTestForNotify=" + isTestForNotify : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId))
    headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId))
    headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase))
    return XHR.sendCommand("POST", _url, headers, _body)
      .then(doc => new models.StartSubscriptionResultWithResponse(doc.body as JSON))
      .catch(err => this.handleError(err))
  }
}
