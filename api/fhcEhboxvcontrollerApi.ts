/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { XHR } from "./XHR"
import * as models from "../model/models"

export class fhcEhboxvcontrollerApi {
  host: string
  headers: Array<XHR.Header>
  constructor(host: string, headers: any) {
    this.host = host
    this.headers = Object.keys(headers).map(k => new XHR.Header(k, headers[k]))
  }

  setHeaders(h: Array<XHR.Header>) {
    this.headers = h
  }

  handleError(e: XHR.Data) {
    if (e.status == 401) throw Error("auth-failed")
    else throw Error("api-error" + e.status)
  }

  deleteMessagesUsingPOST1(
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    messageIds: Array<string>,
    source: string
  ): Promise<models.MessageOperationResponse | any> {
    let _body = null
    _body = messageIds

    const _url =
      this.host +
      "/ehboxV3/move/from/{source}".replace("{source}", source + "") +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId))
    headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId))
    headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase))
    return XHR.sendCommand("POST", _url, headers, _body)
      .then(doc => new models.MessageOperationResponse(doc.body as JSON))
      .catch(err => this.handleError(err))
  }
  getFullMessageUsingGET1(
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    boxId: string,
    messageId: string
  ): Promise<models.MessageResponse | any> {
    let _body = null

    const _url =
      this.host +
      "/ehboxV3/{boxId}/{messageId}"
        .replace("{boxId}", boxId + "")
        .replace("{messageId}", messageId + "") +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId))
    headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId))
    headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase))
    return XHR.sendCommand("GET", _url, headers, _body)
      .then(doc => new models.MessageResponse(doc.body as JSON))
      .catch(err => this.handleError(err))
  }
  getFullMessageUsingPOST1(
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    boxId: string,
    messageId: string,
    alternateKeystores: models.AltKeystoresList
  ): Promise<models.MessageResponse | any> {
    let _body = null
    _body = alternateKeystores

    const _url =
      this.host +
      "/ehboxV3/{boxId}/{messageId}"
        .replace("{boxId}", boxId + "")
        .replace("{messageId}", messageId + "") +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId))
    headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId))
    headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase))
    return XHR.sendCommand("POST", _url, headers, _body)
      .then(doc => new models.MessageResponse(doc.body as JSON))
      .catch(err => this.handleError(err))
  }
  getInfosUsingGET1(
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string
  ): Promise<models.BoxInfo | any> {
    let _body = null

    const _url = this.host + "/ehboxV3" + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId))
    headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId))
    headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase))
    return XHR.sendCommand("GET", _url, headers, _body)
      .then(doc => new models.BoxInfo(doc.body as JSON))
      .catch(err => this.handleError(err))
  }
  loadMessagesUsingGET2(
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    boxId: string,
    limit: number
  ): Promise<models.MessagesResponse | any> {
    let _body = null

    const _url =
      this.host +
      "/ehboxV3/{boxId}".replace("{boxId}", boxId + "") +
      "?ts=" +
      new Date().getTime() +
      (limit ? "&limit=" + limit : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId))
    headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId))
    headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase))
    return XHR.sendCommand("GET", _url, headers, _body)
      .then(doc => new models.MessagesResponse(doc.body as JSON))
      .catch(err => this.handleError(err))
  }
  loadMessagesUsingPOST1(
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    boxId: string,
    limit: number,
    alternateKeystores: models.AltKeystoresList
  ): Promise<models.MessagesResponse | any> {
    let _body = null
    _body = alternateKeystores

    const _url =
      this.host +
      "/ehboxV3/{boxId}".replace("{boxId}", boxId + "") +
      "?ts=" +
      new Date().getTime() +
      (limit ? "&limit=" + limit : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId))
    headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId))
    headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase))
    return XHR.sendCommand("POST", _url, headers, _body)
      .then(doc => new models.MessagesResponse(doc.body as JSON))
      .catch(err => this.handleError(err))
  }
  moveMessagesUsingPOST1(
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    messageIds: Array<string>,
    source: string,
    destination: string
  ): Promise<models.MessageOperationResponse | any> {
    let _body = null
    _body = messageIds

    const _url =
      this.host +
      "/ehboxV3/move/from/{source}/to/{destination}"
        .replace("{source}", source + "")
        .replace("{destination}", destination + "") +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId))
    headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId))
    headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase))
    return XHR.sendCommand("POST", _url, headers, _body)
      .then(doc => new models.MessageOperationResponse(doc.body as JSON))
      .catch(err => this.handleError(err))
  }
  sendMessage2EboxUsingPOST(
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    message: models.DocumentMessage,
    publicationReceipt: boolean,
    receptionReceipt: boolean,
    readReceipt: boolean
  ): Promise<models.MessageOperationResponse | any> {
    let _body = null
    _body = message

    const _url =
      this.host +
      "/ehboxV3/2ebox" +
      "?ts=" +
      new Date().getTime() +
      (publicationReceipt ? "&publicationReceipt=" + publicationReceipt : "") +
      (receptionReceipt ? "&receptionReceipt=" + receptionReceipt : "") +
      (readReceipt ? "&readReceipt=" + readReceipt : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId))
    headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId))
    headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase))
    return XHR.sendCommand("POST", _url, headers, _body)
      .then(doc => new models.MessageOperationResponse(doc.body as JSON))
      .catch(err => this.handleError(err))
  }
  sendMessageUsingPOST1(
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    message: models.DocumentMessage,
    publicationReceipt: boolean,
    receptionReceipt: boolean,
    readReceipt: boolean
  ): Promise<models.MessageOperationResponse | any> {
    let _body = null
    _body = message

    const _url =
      this.host +
      "/ehboxV3" +
      "?ts=" +
      new Date().getTime() +
      (publicationReceipt ? "&publicationReceipt=" + publicationReceipt : "") +
      (receptionReceipt ? "&receptionReceipt=" + receptionReceipt : "") +
      (readReceipt ? "&readReceipt=" + readReceipt : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId))
    headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId))
    headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase))
    return XHR.sendCommand("POST", _url, headers, _body)
      .then(doc => new models.MessageOperationResponse(doc.body as JSON))
      .catch(err => this.handleError(err))
  }
}
