/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { XHR } from "./XHR"
import * as models from "../model/models"

export class fhcStscontrollerApi {
  host: string
  headers: Array<XHR.Header>
  constructor(host: string, headers: any) {
    this.host = host
    this.headers = Object.keys(headers).map(k => new XHR.Header(k, headers[k]))
  }

  setHeaders(h: Array<XHR.Header>) {
    this.headers = h
  }

  handleError(e: XHR.Data) {
    if (e.status == 401) throw Error("auth-failed")
    else throw Error("api-error" + e.status)
  }

  checkKeystoreExistUsingGET(xFHCKeystoreId: string): Promise<boolean | any> {
    let _body = null

    const _url = this.host + "/sts/keystore/check" + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId))
    return XHR.sendCommand("GET", _url, headers, _body)
      .then(doc => JSON.parse(JSON.stringify(doc.body)))
      .catch(err => this.handleError(err))
  }
  checkTokenValidUsingGET(xFHCTokenId: string): Promise<boolean | any> {
    let _body = null

    const _url = this.host + "/sts/token/check" + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId))
    return XHR.sendCommand("GET", _url, headers, _body)
      .then(doc => JSON.parse(JSON.stringify(doc.body)))
      .catch(err => this.handleError(err))
  }
  getBearerTokenUsingGET(
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    ssin: string,
    xFHCKeystoreId: string
  ): Promise<models.BearerToken | any> {
    let _body = null

    const _url =
      this.host +
      "/sts/token/bearer" +
      "?ts=" +
      new Date().getTime() +
      (ssin ? "&ssin=" + ssin : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId))
    headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase))
    headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId))
    return XHR.sendCommand("GET", _url, headers, _body)
      .then(doc => new models.BearerToken(doc.body as JSON))
      .catch(err => this.handleError(err))
  }
  getKeystoreInfoUsingGET(
    keystoreId: string,
    xFHCPassPhrase: string
  ): Promise<models.CertificateInfo | any> {
    let _body = null

    const _url =
      this.host +
      "/sts/keystore/{keystoreId}/info".replace("{keystoreId}", keystoreId + "") +
      "?ts=" +
      new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase))
    return XHR.sendCommand("GET", _url, headers, _body)
      .then(doc => new models.CertificateInfo(doc.body as JSON))
      .catch(err => this.handleError(err))
  }
  registerTokenUsingPOST(
    token: string,
    xFHCTokenId: string,
    quality?: string
  ): Promise<any | Boolean> {
    let _body = null
    _body = token

    const _url =
      this.host +
      "/sts/token" +
      "?ts=" +
      new Date().getTime() +
      (quality ? "&quality=" + quality : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId))
    return XHR.sendCommand("POST", _url, headers, _body)
      .then(doc => true)
      .catch(err => this.handleError(err))
  }
  requestTokenUsingGET(
    xFHCPassPhrase: string,
    ssin: string,
    xFHCKeystoreId: string,
    quality: string,
    xFHCTokenId?: string
  ): Promise<models.SamlTokenResult | any> {
    let _body = null

    const _url =
      this.host +
      "/sts/token/{quality}".replace("{quality}", quality + "") +
      "?ts=" +
      new Date().getTime() +
      (ssin ? "&ssin=" + ssin : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase))
    headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId))
    headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId))
    return XHR.sendCommand("GET", _url, headers, _body)
      .then(doc => new models.SamlTokenResult(doc.body as JSON))
      .catch(err => this.handleError(err))
  }
  requestTokenUsingGET1(
    xFHCPassPhrase: string,
    ssin: string,
    xFHCKeystoreId: string,
    isMedicalHouse?: boolean,
    isGuardPost?: boolean,
    isSortingCenter?: boolean,
    xFHCTokenId?: string
  ): Promise<models.SamlTokenResult | any> {
    let _body = null

    const _url =
      this.host +
      "/sts/token" +
      "?ts=" +
      new Date().getTime() +
      (ssin ? "&ssin=" + ssin : "") +
      (isMedicalHouse ? "&isMedicalHouse=" + isMedicalHouse : "") +
      (isGuardPost ? "&isGuardPost=" + isGuardPost : "") +
      (isSortingCenter ? "&isSortingCenter=" + isSortingCenter : "")
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "application/json"))
    headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase))
    headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId))
    headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId))
    return XHR.sendCommand("GET", _url, headers, _body)
      .then(doc => new models.SamlTokenResult(doc.body as JSON))
      .catch(err => this.handleError(err))
  }
  uploadKeystoreUsingPOST(file: any): Promise<models.UUIDType | any> {
    let _body = null
    file &&
      (_body = _body || new FormData()).append(
        "file",
        new Blob(file, { type: "application/octet-stream" })
      )
    const _url = this.host + "/sts/keystore" + "?ts=" + new Date().getTime()
    let headers = this.headers
    headers = headers
      .filter(h => h.header !== "Content-Type")
      .concat(new XHR.Header("Content-Type", "multipart/form-data"))
    return XHR.sendCommand("POST", _url, headers, _body)
      .then(doc => new models.UUIDType(doc.body as JSON))
      .catch(err => this.handleError(err))
  }
}
